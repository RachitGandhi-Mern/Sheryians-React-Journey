//#!Why we need React ?
We need React because it solves several real-world problems in web development, especially when building modern, fast, and dynamic user interfaces. Here’s a simple breakdown of why React is needed:

1. Component-Based Architecture
	•	React breaks UI into reusable components.
	•	Each component is independent and modular, making your code easier to manage and scale.
Example: You can create a Button component once and reuse it across multiple pages.

2. Fast Rendering with Virtual DOM
	•	React uses a Virtual DOM that compares changes and updates only what’s necessary.
	•	This makes your app blazing fast, even with frequent UI updates.
Unlike direct DOM manipulation, React’s diffing algorithm avoids unnecessary re-renders.

3. Declarative Code Style
	•	You just describe what your UI should look like at any state.
	•	React handles how to update the DOM efficiently.
This makes UI code easier to read, debug, and reason about.

4. Efficient State Management
	•	React makes handling dynamic data and state easier with tools like useState, useEffect, and context.
	•	Combine it with Redux, Zustand, or React Query for advanced needs.

5. One-Way Data Flow
	•	React follows a unidirectional data flow, which means data flows from parent to child, making app behavior more predictable.

6. Strong Ecosystem & Community
	•	Tons of libraries, tools, and integrations.
	•	Huge developer community, rich documentation, and job demand.

7. Perfect for SPAs (Single Page Applications)
	•	React excels at building fast, dynamic, and SEO-friendly single-page apps.

 Real-Life Example :-
Think Instagram, Facebook, Airbnb, and Netflix — they use React to render complex UIs with fast performance.

//#!React_vs_Angular_vs_Vue:
  //#!React:
    Type: "Library (UI-focused)"
    Developed_By: "Meta (Facebook)"
    Language: "JavaScript + JSX"
    Learning_Curve: "Moderate"
    Data_Binding: "One-way"
    DOM: "Virtual DOM"
    State_Management: 
      - "Redux"
      - "Context API"
      - "Recoil"
      - "Zustand"
    Routing: "React Router"
    Performance: "High (optimized with Virtual DOM)"
    Ecosystem: "Very large, lots of third-party tools"
    Best_Use_Case: "SPAs, dynamic UIs"
    Summary: "Lego-like, flexible, needs extra libraries"

  //#!Angular:
    Type: "Full-fledged Framework"
    Developed_By: "Google"
    Language: "TypeScript"
    Learning_Curve: "Steep"
    Data_Binding: "Two-way"
    DOM: "Real DOM with change detection"
    State_Management: 
      - "Built-in services"
    Routing: "Built-in"
    Performance: "High, but heavier than others"
    Ecosystem: "Large, enterprise-oriented"
    Best_Use_Case: "Enterprise-level applications"
    Summary: "All-in-one, powerful but complex"

  //#!Vue:
    Type: "Progressive Framework"
    Developed_By: "Evan You (ex-Google)"
    Language: "JavaScript + HTML templates"
    Learning_Curve: "Easy to Moderate"
    Data_Binding: "Two-way (v-model)"
    DOM: "Virtual DOM"
    State_Management: 
      - "Vuex"
      - "Pinia"
    Routing: "Vue Router"
    Performance: "High (lightweight and fast)"
    Ecosystem: "Growing fast, especially in Asia"
    Best_Use_Case: "Prototypes, small to medium apps"
    Summary: "Balanced, beginner-friendly, structured"

//#!Virtual DOM in React
Real DOM:
Browser ka original Document Object Model.
Agar aap UI mein koi choti si cheez bhi change karte ho (jaise ek button ka text), toh poora UI browser ko re-render karna padta hai. Yeh slow hota hai, especially large apps mein.

Virtual DOM:
React ek copy banata hai Real DOM ka — isse bolte hai Virtual DOM.
Yeh memory mein hoti hai (not actual screen).
Jab UI mein koi change hota hai, React pehle Virtual DOM update karta hai → fir compare karta hai old vs new (diffing) → sirf jo part change hua hai wahi real DOM mein update hota hai.

Simple Example:
Imagine tumhare paas ek Notebook hai (Real DOM), aur ek Rough Notebook (Virtual DOM).

Tum pehle rough mein change likhte ho, fir check karte ho kya actual notebook mein change karna zaruri hai. Sirf necessary parts update karte ho — fast, efficient, aur smart work 😎

React Virtual DOM Process (Step-by-Step)
	1.	Initial Rendering:
	•	React poora UI ka ek virtual DOM tree banata hai.
	2.	State / Props Change:
	•	Jab component ka state ya props change hota hai, React firse ek new virtual DOM banata hai.
	3.	Diffing Algorithm:
	•	React compares Old Virtual DOM vs New Virtual DOM.
	•	Sirf difference (diff) nikalta hai.
	4.	Reconciliation:
	•	React finds minimum number of changes needed.
	•	Yeh optimized patch Real DOM pe apply hota hai.
	5.	DOM Update:
	•	Only changed elements ko Real DOM mein update karta hai.
✅ No full re-render, ✅ Better Performance

⚡ Virtual DOM ke Fayde (Benefits)
✅ Super Fast UI Updates
✅ Less Memory Usage
✅ Better Performance in Large Apps
✅ Efficient Rendering
✅ React Developer Tools ke through debug bhi asaan hota hai.

Important Note:
	•	Virtual DOM React ka internal concept hai.
	•	Aapko manually kuch karne ki zarurat nahi hoti.
	•	React smartly handle karta hai sab kuch behind the scenes 💻

Ek restaurant mein waiter order rough pad pe likhta hai (Virtual DOM), fir chef ko sirf final orders batata hai jo change hue (Real DOM).
Isse speed bhi badhti hai aur galtiyan bhi kam hoti hain.

Bonus: Related Concepts
	•	Reconciliation: Difference find karne aur update karne ka process.
	•	Fiber Architecture (React 16+): React ka new engine jo rendering ko aur zyada efficient banata hai.


//#!SPA (Single Page Application) vs MPA (Multi Page Application):

SPA – Single Page Application

Definition:
Ek aisi web app jisme sirf ek single HTML page hota hai. Jab aap kisi new page pe jaate ho, toh poora page reload nahi hota — bas partially content change hota hai, via JavaScript (React, Vue, Angular).

Example:
Gmail, Facebook, Instagram, Twitter, Netflix

✅ Advantages of SPA:
	•	Fast loading after first load
	•	Smooth user experience (no full page reload)
	•	Data fetch hoti hai via AJAX/fetch API
	•	Perfect for mobile-like experiences

❌ Disadvantages of SPA:
	•	Initial load thoda heavy ho sakta hai
	•	SEO ke liye tricky hota hai (kyunki content dynamic hota hai)
	•	Browser JS disable ho to app nahi chalega

MPA – Multi Page Application
Definition:
Traditional websites jahan har page ke liye alag HTML file hoti hai. Jab bhi aap kisi link pe click karte ho, poora page reload hota hai server se.

Example:
Amazon, Flipkart (checkout system), Government websites, Blogs (WordPress)

✅ Advantages of MPA:
	•	Better SEO (each page has its own URL + content)
	•	Server-side rendering is default
	•	Great for large apps with many categories/pages

❌ Disadvantages of MPA:
	•	Har page load pe full reload (slow experience)
	•	Development complex ho jata hai (bohot saare files/pages manage karne padte hain)
	•	UI transitions are not smooth

SPA vs MPA Comparison Table
Feature	SPA (Single Page App)	MPA (Multi Page App)
Page Reload	No (Only data changes)	Yes (Full reload)
Speed (after load)	Fast & Smooth	Slower due to reloads
SEO Friendly	Not by default (needs SSR or pre-rendering)	Yes, very SEO friendly
Tech Stack	Mostly JS frameworks (React, Vue)	HTML, PHP, JSP, etc.
Development Time	Shorter (for small-medium apps)	Longer (complex setup)
Example Apps	Gmail, Twitter, Netflix	Flipkart, IRCTC, Blog Sites

Quick Trick to Remember:
SPA = App jaisa experience
MPA = Website jaisa experience


 
//#!Library vs Framework  Full Difference ? 
What is a Library?
Definition:
Ek library ek pre-written code ka collection hota hai, jise aap apne code mein as a helper tool use karte ho — jab zarurat ho tab call karte ho. Aapka code control mein rehta hai.
Aap use karte ho functions, methods, utilities from the library.

What is a Framework?
Definition:
Ek framework ek complete structure provide karta hai. Isme aap apna code daalte ho — lekin control framework ke paas hota hai. Is concept ko kehte hain Inversion of Control (explained below 👇)
Framework aapke code ko call karta hai, not the other way around.

Real-Life Analogy (Best Way to Remember)
	•	Library:
Aap ek chef ho, aur ek cookbook (library) se kabhi kabhi recipe uthate ho.
Aap decide karte ho kab, kaise, kya use karna hai = YOU are in control
	•	Framework:
Aap ek chef ho, lekin ek food chain (framework) ke kitchen mein kaam kar rahe ho —
Unka poora setup, timing, kaam karne ka tareeka fixed hai —
Aap sirf unke system mein apna code likh rahe ho = FRAMEWORK is in control

Main Differences – Simplified Table

Feature	Library	Framework
Control Flow	Aap control karte ho	Framework control karta hai
Inversion of Control	❌ Nahi hota	✅ Hota hai (IoC)
Flexibility	Zyada flexible	Less flexible (fixed structure)
Usage	Aap specific functions/methods use karte ho	Framework app structure define karta hai
Examples	React (Library), Lodash, Axios	Angular, NestJS, Next.js, Remix
Who calls Whom?	Aap library ko call karte ho	Framework aapka code call karta hai

Code Example for Clarity

Using a Library (e.g. Lodash)

import _ from 'lodash';

const numbers = [1, 2, 3];
const doubled = _.map(numbers, (n) => n * 2);

✅ Aapne library ko call kiya, aapke code ka control aapke paas hai.

Using a Framework (e.g. Next.js)
// pages/index.js
export default function Home() {
  return <h1>Hello from Next.js</h1>;
}

✅ Next.js khud routing, rendering handle karta hai — aap sirf Home() component provide karte ho. Control framework ke paas hai.
Inversion of Control (IoC) — Important Concept
	•	Library: Aap functions call karte ho (you call it)
	•	Framework: Wo aapka function call karta hai (it calls you)

//#!Kab kya use karna chahiye?
Situation	Use This
Freedom chahiye, structure apna banani hai	Library
Rapid development, built-in structure chahiye	Framework
Sirf frontend banana hai (React)	Library (React)
Full-stack, routing + rendering + server chahiye	Framework (Next.js, Remix, NestJS)

Final Summary (One Liner):
Library = You call the code.
Framework = Framework calls your code.

//#!Angular kya hai?
	•	✅ Type: Frontend Framework
	•	🏢 Maintained by: Google
	•	🛠️ Built With: TypeScript
	•	📦 Comes with everything built-in:
	•	Routing
	•	HTTP client
	•	Form handling
	•	Dependency Injection
	•	State management (basic)
	•	Component-based structure

Why it’s called a Framework (not a library)?
Because:
Feature	Angular Supports?
Inversion of Control	✅ Yes
Opinionated structure	✅ Yes
Complete toolbox (routing, forms, HTTP)	✅ Yes
CLI tools, file structure	✅ Predefined
You write code inside its structure	✅ Yes

Conclusion: Angular khud aapke code ko call karta hai, aur pura app banane ka fixed tareeka deta hai — isliye Angular ek framework hai, not a library.

Clarification: React, NestJS, Remix.js – Kya hai?
⚛️ React – Library, not a Framework
	•	Developer: Meta (Facebook)
	•	Type: Frontend Library
	•	Purpose: Sirf UI banane ke liye (View layer of MVC)
	•	Kya nahi karta: React khud backend nahi banata, na hi routing, state management ya API handling built-in deta hai — ye sab extra libraries se manage hota hai.
	•	Use with: Redux, React Router, Zustand, etc.

✅ React ek component-based approach deta hai — jisme aap UI ko chhote chhote parts (components) mein tod ke reuse kar sakte ho.

🛡️ NestJS – Backend Framework (not related to React directly)
	•	Developer: Independent (based on Node.js + TypeScript)
	•	Type: Full-fledged Backend Framework
	•	Inspired by: Angular-style architecture
	•	Used for: Building scalable server-side apps (REST APIs, GraphQL, etc.)

NestJS is NOT related to React
✅ It is for backend only – but can be used with React to build full-stack apps.

So, “Nest is React’s framework” — ❌ Incorrect
Correct: “NestJS is a backend framework which works well with frontend libraries like React.”

Remix (Remix.js) – Fullstack React Framework
	•	Type: Full-stack React Framework
	•	Built on: React + Web Standards (like Fetch, Form, HTML5)
	•	Supports: Server-side rendering, data loading, nested routing, error boundaries.
	•	Competes with: Next.js

✅ Remix allows you to write both frontend and backend logic in one codebase (routes, loaders, actions)
✅ It makes React a full-stack capable solution — via server + client in one app

So yes, Remix is a full-stack React framework (Correct ✅)
Like: Remix, Next.js, Redwood.js – all make React full-stack capable.

TL;DR:
Name	Type	Related To React?	Frontend / Backend	Fullstack Capable?
React	Library	✅ Itself	Frontend	❌ (needs help)
NestJS	Backend Framework	❌ Not React-based	Backend	✅ (with React)
Remix	Fullstack React Framework	✅ Built on React	Frontend + Backend	✅ (by default)

🟩 What is Node.js?
Definition:
Node.js ek JavaScript ka engine hai jo browser ke bahar bhi JavaScript chalane deta hai — server par.

Matlab:
🔸 Pehle JavaScript sirf browser (Chrome, Firefox) mein chalti thi.
🔸 Ab Node.js ki help se hum JavaScript ka use backend development ke liye bhi kar sakte hain.

Technical Definition:
Node.js is a JavaScript runtime built on Chrome’s V8 engine. It allows you to run JavaScript code outside the browser, especially on servers.

✅ Why Node.js is Powerful:
Feature	Simple Explanation
Non-blocking I/O	Ek kaam ke complete hone ka wait nahi karta. Dusra kaam side by side karta rehta hai. (Fatafat performance)
Single-threaded	Ek hi thread use karta hai, but smartly sab kuch manage karta hai using Event Loop
Asynchronous	Code background mein run hota hai, jaise file read, database access
Super Fast	Google ke V8 engine par based hone ki wajah se JavaScript lightning fast hoti hai
Cross-platform	Windows, Linux, Mac sab mein easily run hota hai

📦 What is npm?
Definition:
npm = Node Package Manager
Iska kaam hai:
✔️ JavaScript tools, libraries download karna
✔️ Unko manage karna
✔️ Scripts run karna (like npm run dev)
✔️ Apna khud ka package duniya ke saath share karna

🧠 Simple Example:
Aap React ya Express use karna chahte ho?
npm install express
npm install react
Bas ek command, aur wo pura code package download ho jata hai from npm’s huge library.

🗂️ package.json – The Heart of Your Project
Jab aap npm init chalate ho, ek file banti hai: package.json
Example:
{
  "name": "my-app",
  "version": "1.0.0",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "express": "^4.18.2"
  }
}

Isme kya hota hai?
Field	Meaning
name	App ka naam
version	App ka version
scripts	Custom commands (like npm start)
dependencies	Konsi libraries install ki gayi hain

Common npm Commands – Super Useful
Command	What it Does
npm init	New project start karo (package.json banta hai)
npm install <package>	Koi bhi library install karo (like express, axios)
npm install	Sab dependencies ek saath install karo
npm start	Start the project (runs node index.js if set)
npm run dev	Custom dev script run karne ke liye

💡 Real-Life Analogy:
🧠 Imagine:
	•	Node.js = Jaise aapka engine, jo JavaScript code ko run karta hai server par
	•	npm = Jaise ek Play Store, jahan se aap libraries install karte ho

🏗️ Where Node.js is Used?
Use Case	Example
API Backend	Create REST APIs using Express.js
Real-time Chat	WhatsApp Clone using Socket.io
CLI Tools	Like npm, vite, create-react-app
Desktop Apps	Using Electron (like VS Code)
Automation Scripts	Auto file renaming, folder cleanup, etc.

🌍 Who Uses Node.js?
	•	Netflix (for streaming backend)
	•	PayPal (server APIs)
	•	LinkedIn
	•	NASA (for data pipelines)
	•	Uber (real-time matching)

Final Summary — One Line:
Node.js lets you run JavaScript on the server
npm helps you install & manage code libraries

//#!⚡ Vite vs Webpack – React Boilerplate Installers (Hinglish Mein)
//#!Vite kya hai?
Vite ek modern frontend build tool hai jo React, Vue, Svelte, etc. projects ko lightning fast banata hai. Iska kaam hai development aur production ke liye optimized environment dena.

Simple Words:

Vite ek third-party tool hai jo React ka boilerplate project banata hai aur development fast karta hai.
✅ Vite ki Features:
Feature	Simple Explanation
Super Fast Start	Instant server start hota hai (no waiting)
Hot Reloading	Aapka code change hote hi browser update ho jata hai
Modern ES Modules	Old-style bundling ki jagah new style import/export
Minimal Config	Bilkul kam configuration mein kaam shuru ho jata hai

Kaise use karte hain Vite to install React?
npm create vite@latest my-app -- --template react
cd my-app
npm install
npm run dev
Yeh 4 step mein React project ready hota hai! 😎

🔷 Webpack kya hai?
Webpack ek bundler tool hai jo multiple files (JS, CSS, images) ko ek single optimized bundle mein convert karta hai.

Pehle kya hota tha?
Pehle React project setup ke liye manually:
	•	Babel lagana padta
	•	Webpack config likhna padta
	•	Dev server setup karna padta
⚠️ Bohot time lagta tha!

✅ Webpack ki Features:
Feature	Explanation
Bundling	JS, CSS, Images sabko bundle karta hai
Code Splitting	App ko alag-alag chunks mein divide karta hai
Plugins & Loaders	Extra features add karne ke liye
Production Optimized	Final output chhota, fast aur optimized hota hai

🆚 Vite vs Webpack – React Boilerplate Ke Liye Kaun Best?
Feature	Vite ⚡	Webpack 🔧
Speed (Dev Time)	⚡ Super Fast	🐢 Thoda slow
Config Needed	Minimal	Zyada manual setup
HMR (Hot Reload)	Instant	Slightly slower
Learning Curve	Easy	Thoda complex
Out-of-the-box React Template	✅ Yes (vite + react)	❌ Manual setup ya CRA use karna padta hai

🤔 CRA kya tha?
Create React App bhi ek boilerplate generator hai, lekin wo ab outdated hai — Vite ne replace kar diya because it’s much faster and modern.

Final Summary (One Line):

Vite ek modern, fast tool hai jo React boilerplate setup aur dev environment ko ultra smooth banata hai — better than old school Webpack.

//#!🚦 What is Routing?
Routing controls the navigation between different pages or views in a web application.

Key Points:
	•	Client-side Routing (SPA): No page reload, just content changes based on URL.
	•	Server-side Routing (MPA): Each URL request fetches a new HTML page from the server.

In React, we use React Router to manage routes.
React Router Example:
<Router>
  <Route exact path="/" component={Home} />
  <Route path="/about" component={About} />
</Router>

Why Important?
	•	It allows users to navigate between pages without refreshing the browser.
	•	Helps manage complex apps with multiple views.

//#!What are Services?
Services are functions or modules that handle app logic like API calls, authentication, and other data manipulations. They help keep the application organized and modular.

Key Types:
	•	API Services: Fetch data from the server (e.g., using Axios or Fetch API).
	•	Utility Services: Reusable helper functions (e.g., date formatting).
	•	Authentication Services: Manage user login, registration, sessions, etc.

Example (API Service):

const fetchData = async () => {
  const response = await axios.get('/api/data');
  return response.data;
};

Why Important?
	•	Modularizes the app’s logic, keeping code clean and maintainable.
	•	Allows reuse of common functions across the app.

Short Version:
Routing:
  definition: "Manages page navigation"
  tools: ["React Router", "Vue Router"]
  example: 
    - path: "/home" -> HomePage
    - path: "/about" -> AboutPage

Services:
  definition: "Handles app logic like API calls, auth"
  types: ["API Services", "Utility Services", "Authentication"]
  example:
    - function: "fetchData()"
      purpose: "Fetches data from the backend"




//#todo Some Topics You have to Now  before Starting React 

//#!Arrays, Objects, and Array Functions with Implicit Return

🧳 Arrays
Arrays are ordered collections of data. They are used when you have multiple values of the same type.

Example:
let numbers = [1, 2, 3, 4];
let fruits = ['apple', 'banana', 'orange'];
Arrays are important because they allow you to store a list of items that you can iterate over, modify, and perform operations on.

📦 Objects
Objects are collections of key-value pairs. The keys are strings (or symbols), and the values can be any type of data, like numbers, strings, or even other objects or arrays.

Example:
let person = {
  name: 'Rachit',
  age: 25,
  isStudent: false
};
In React, we often use objects to represent things like user data, configurations, or component states.

//#!Array Functions (map, reduce, etc.) with Implicit Return

Implicit Return:
In arrow functions, if you’re returning a value directly, you can skip the {} and the return keyword. This is called implicit return.

Example:
const add = (a, b) => a + b;  // Implicit return
Here, the value of a + b is returned automatically without using the return keyword.

Map:
map() is used to transform each item in an array and create a new array with the transformed values.

Example:
let numbers = [1, 2, 3, 4];
let doubled = numbers.map(num => num * 2);  // [2, 4, 6, 8]
map() takes each element in the array, performs the function, and returns a new array with the results.

Reduce:
reduce() is used to accumulate array values into a single value (like a sum or an object).

Example:
let numbers = [1, 2, 3, 4];
let sum = numbers.reduce((acc, num) => acc + num, 0);  // 10
Here, reduce() starts with 0 and adds each number in the array to it.

//#!Mutability vs. Immutability

🔄 Mutability
Mutability means that an object or array can be modified directly after it’s created.

Example (Mutability):
let arr = [1, 2, 3];
arr[0] = 5;  // arr becomes [5, 2, 3]
In React, you usually want to avoid mutability because changing an object or array directly can make state management tricky.

🔒 Immutability

Immutability means that you don’t modify the original object or array. Instead, you create a new copy with the changes.

Example (Immutability):
let arr = [1, 2, 3];
let newArr = [...arr];  // Creates a new array
newArr[0] = 5;  // newArr becomes [5, 2, 3]

In React, state is often treated as immutable because mutating state directly can prevent React from detecting changes efficiently.

3. Destructuring
Destructuring is a feature that lets you extract values from arrays or objects and store them in variables.

Array Destructuring:
let arr = [1, 2, 3];
let [first, second] = arr;  // first = 1, second = 2

Object Destructuring:
let person = { name: 'Rachit', age: 25 };
let { name, age } = person;  // name = 'Rachit', age = 25

This makes your code cleaner and more readable, especially when dealing with objects or arrays.

4. React Concepts
🎨 Component

In React, a Component is a reusable, self-contained unit that returns JSX (HTML-like code). Components can be function-based or class-based.

Functional Components:
	•	Simple components that are just JavaScript functions.
	•	Commonly used in modern React with hooks.

Example:
function Welcome() {
  return <h1>Hello, Rachit!</h1>;
}

Class Components:
	•	Older style of components in React.
	•	They have more features like lifecycle methods (though now mostly replaced by hooks).

Example:
class Welcome extends React.Component {
  render() {
    return <h1>Hello, Rachit!</h1>;
  }
}

??#!Data Usage - JSX - Data Flow
In React, you use JSX to write HTML-like syntax within JavaScript. It’s a powerful way to combine UI and logic in one place.

JSX:

function Welcome() {
  return <h1>Hello, Rachit!</h1>;  // JSX syntax
}

Data Flow:

React uses unidirectional data flow, meaning data flows from parent to child components via props. This makes managing the state predictable.

🏷️ Props

Props (short for properties) are the mechanism to pass data from parent to child components. They are read-only and cannot be modified by the child component.

Example:
function Welcome({ name }) {
  return <h1>Hello, {name}!</h1>;
}

<Welcome name="Rachit" />

In this case, the name prop is passed to the Welcome component.

🧩 State → useState

State in React refers to the data that determines how the component behaves and renders. You manage the state using the useState hook in functional components.

useState:
useState lets you define and update the component’s state.

Example:
import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}

	•	count: The current state.
	•	setCount: The function used to update the state.

⸻

//#!Effect → useEffect

The useEffect hook is used to perform side effects in your components. Side effects include operations like fetching data, setting up subscriptions, or manually changing the DOM.

useEffect:
It runs after every render, but you can control when it runs based on the dependencies you provide.

Example:
import React, { useState, useEffect } from 'react';

function Timer() {
  const [seconds, setSeconds] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => {
      setSeconds(seconds => seconds + 1);
    }, 1000);

    return () => clearInterval(interval);  // Cleanup
  }, []);  // Empty array means it runs only once when component mounts

  return <p>Time: {seconds} seconds</p>;
}

Here, useEffect is used to start a timer when the component mounts and clean it up when the component unmounts.

📝 Summary (Quick Recap):
	•	Arrays: Lists of values. Can use methods like map(), reduce().
	•	Objects: Key-value pairs used for storing data.
	•	Destructuring: Simplifies extracting values from arrays/objects.
	•	Mutability/Immutability: Mutability allows direct modification; immutability prevents it.
	•	JSX: HTML-like syntax in JavaScript.
	•	Props: Used to pass data from parent to child components.
	•	State: Data that controls the component’s behavior; updated via useState.
	•	Effect: Performs side effects in functional components, like data fetching.
